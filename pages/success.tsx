import {
  CheckIcon,
  ChevronDownIcon,
  ChevronUpIcon,
  ShoppingCartIcon,
} from '@heroicons/react/outline'
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import { useRouter } from 'next/router'
import React, { useEffect, useState } from 'react'
import Button from '../components/Helper/Button'
import { useMediaQuery } from 'react-responsive'
import { GetServerSideProps } from 'next'
import axios from 'axios'

interface Props {
  products: StripeProduct[]
}

function Success({ products }: Props) {
  const [mounted, setMounted] = useState<boolean>(false)
  const router = useRouter()
  const { session_id }: any = router.query
  const isTabletOrMobile = useMediaQuery({ maxWidth: 1024 })
  const [orderSummaryCondition, setOrderSummaryCondition] = useState(false)
  const totalAmount = products.reduce((acc, product) => acc + product.price.unit_amount / 100, 0)

  const showOrderSummaryCondition = isTabletOrMobile ? orderSummaryCondition : true

  const handleShowOrderSummary = () => {
    setOrderSummaryCondition((prev) => !prev)
  }

  useEffect(() => {
    setMounted(true)
  }, [])

  return (
    <>
      <Head>
        <title>Thank you! - Apple</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header className="block border-b border-gray-200 p-4 lg:hidden">
        <Link href="/">
          <div className="headerLink relative ml-4 h-8 w-8">
            <Image src="https://rb.gy/vsvv2o" alt="" layout="fill" objectFit="contain" priority />
          </div>
        </Link>
      </header>

      <main className="mx-4 flex max-w-5xl flex-col pb-6 lg:ml-24 lg:max-w-full lg:flex-row lg:items-center lg:gap-8">
        <section className="order-2 space-y-4 lg:order-1 lg:w-3/5">
          <section>
            <Link href="/">
              <div className="headerLink relative hidden h-24 w-12 lg:block">
                <Image
                  src="https://rb.gy/vsvv2o"
                  alt=""
                  layout="fill"
                  objectFit="contain"
                  priority
                />
              </div>
            </Link>
          </section>

          <section className="flex items-center gap-3">
            <div className="flex h-11 w-11 items-center justify-center rounded-full border-2 border-black">
              <CheckIcon className="h-8 w-8" />
            </div>
            <div>
              <p className="text-md text-gray-500">Order # {session_id?.slice(-5)}</p>
              <h4 className="text-lg">
                Thank you
                {/* {session ? session.user?.name?.split(' ')[0] : 'Guest'} */}
              </h4>
            </div>
          </section>

          <section className="space-y-4">
            {/* Box 1 */}
            <div className="box">
              <h2 className="mb-3 text-lg font-semibold">Your order is confirmed!</h2>
              <p>
                We’ve accepted your order, and we’re getting it ready. Come back to this page for
                updates on your shipment status.
              </p>
            </div>
            {/* Box 2 */}
            <div className="box">
              <p className="font-medium">Other tracking number:</p>
              <p>CNB21441622</p>
            </div>
            {/* Box 3 */}
            <div className="box">
              <p>Order updates</p>
              <p className="text-md">You’ll get shipping and delivery updates by email and text.</p>
            </div>
          </section>

          {/* Contact section */}
          <section className="flex flex-col items-center justify-between gap-2 lg:flex-row">
            <div className="flex gap-2">
              <span className="cursor-pointer text-blue-500 hover:underline">Need help?</span>
              <span className="cursor-pointer text-blue-500 hover:underline">Contact us!</span>
            </div>

            {mounted && (
              <Button
                title="Continue shopping"
                onClick={() => router.push('/')}
                width={isTabletOrMobile ? 'w-full' : undefined}
              />
            )}
          </section>
        </section>

        {mounted && (
          <section className="order-1 h-screen overflow-y-scroll bg-[#fafafa] lg:order-2 lg:w-2/5">
            {/* Section 1 */}
            <section
              className={`mb-4 block w-full lg:hidden ${
                isTabletOrMobile && 'border-b'
              } text-md border-gray-200`}
            >
              <div className="flex items-center justify-between px-4 py-6">
                <button className="flex items-center gap-3" onClick={handleShowOrderSummary}>
                  <ShoppingCartIcon className="h-6 w-6" />
                  <p>Show order summary</p>
                  {showOrderSummaryCondition ? (
                    <ChevronDownIcon className="h-6 w-6" />
                  ) : (
                    <ChevronUpIcon className="h-6 w-6" />
                  )}
                </button>
                <p>
                  {new Intl.NumberFormat('de-DE', { style: 'currency', currency: 'USD' }).format(
                    totalAmount + 20
                  )}
                </p>
              </div>
            </section>
            {/* Section 2 */}
            {showOrderSummaryCondition && (
              <section className="w-2xl mx-auto px-4 lg:max-w-lg lg:px-10 lg:py-12">
                <div className="space-y-4 pb-4">
                  {products.map((product) => (
                    <div className="flex items-center justify-between" key={product.id}>
                      <div className="flex items-center gap-4">
                        {/* Image */}
                        <div className="relative flex h-14 w-14 items-center justify-center rounded-md border border-gray-300 bg-[#f1f1f1]">
                          <div className="relative h-8 w-8 animate-bounce">
                            <Image
                              src="https://rb.gy/vsvv2o"
                              alt=""
                              objectFit="contain"
                              layout="fill"
                              priority
                            />
                          </div>

                          <div className="absolute -right-2 -top-2 flex h-4 w-4 items-center justify-center rounded-full bg-green-500 text-xs font-semibold text-white">
                            {product.quantity}
                          </div>
                        </div>

                        {/* Title */}
                        <p className="text-md font-semibold">{product.description}</p>
                      </div>

                      {/* Price */}
                      <div className="text-md font-semibold">
                        {new Intl.NumberFormat('de-DE', {
                          style: 'currency',
                          currency: 'USD',
                        }).format(product.price.unit_amount / 100)}
                      </div>
                    </div>
                  ))}

                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <p className="text-gray-600">Subtotal</p>
                      <p className="font-semibold">
                        {new Intl.NumberFormat('de-DE', {
                          style: 'currency',
                          currency: 'USD',
                        }).format(totalAmount)}
                      </p>
                    </div>
                    <div className="flex items-center justify-between">
                      <p className="text-gray-600">Discount</p>
                    </div>
                    <div className="flex items-center justify-between">
                      <p className="text-gray-600">Shipping</p>
                      <p className="font-semibold">
                        {new Intl.NumberFormat('de-DE', {
                          style: 'currency',
                          currency: 'USD',
                        }).format(20)}
                      </p>
                    </div>
                  </div>
                </div>
              </section>
            )}
          </section>
        )}
      </main>
    </>
  )
}

export const getServerSideProps: GetServerSideProps<Props> = async ({ query }) => {
  const sessionId = query.session_id as string

  const { data } = await axios.get(
    `${process.env.NEXT_PUBLIC_BASE_URL}/api/getSession?session_id=${sessionId}`
  )

  return {
    props: {
      products: data.session.data,
    },
  }
}

export default Success
